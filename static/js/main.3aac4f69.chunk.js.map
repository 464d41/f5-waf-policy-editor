{"version":3,"sources":["menu.js","general.js","blockingSettings.js","methods.js","urls.js","filetypes.js","headers.js","parameters.js","config.js","index.js","helpers.js"],"names":["Menu","Nav","variant","className","activeKey","this","props","name","onClick","disabled","React","Component","MenuItem","Item","Link","eventKey","General","state","policy","e","target","value","onChange","applicationLanguage","enforcementMode","template","InputGroup","size","Prepend","Text","FormControl","type","changeName","changeApplicationLanguage","changeEnforcementMode","changeTemplateName","BlockingSettings","ViolationsList","violation","getAllViolations","find","v","id","blockingSettings","violations","push","Dropdown","as","ButtonGroup","Toggle","map","addViolation","title","Violations","alarm","block","learn","splice","Table","striped","bordered","hover","Button","delAllViolations","index","Form","Check","toString","checked","toggleAlarm","toggleBlock","delViolation","Methods","method","Method","methods","addMethod","MethodsList","delAllMethods","indexOf","delMethod","Urls","url","Url","urls","addUrl","UrlsList","protocol","text","attackSignaturesCheck","metacharsOnUrlCheck","wildcardOrder","parseInt","allowRepeatedOccurrences","delAllUrls","changeMethod","changeProtocol","changeType","toggleAttackSignaturesCheck","toggleMetacharsOnUrlCheck","changeWildcardOrder","delUrl","Filetypes","filetype","Filetype","filetypes","addFiletype","FiletypesList","allowed","checkUrlLength","urlLength","checkQueryStringLength","queryStringLength","checkPostDataLength","postDataLength","checkRequestLength","requestLength","responseCheck","delAllFiletypes","toggleAllowed","toggleCheckUrlLength","changeUrlLength","toggleCheckQueryStringLength","changeQueryStringLength","toggleCheckPostDataLength","changePostDataLength","toggleCheckRequestLength","changeRequestLength","toggleResponseCheck","delFiletype","Headers","header","Header","headers","addHeader","HeadersList","mandatory","checkSignatures","htmlNormalization","decodeValueAsBase64","delAllHeaders","toggleMandatory","toggleCheckSignatures","toggleHtmlNormalization","toggleBase64","toggleAllowRepeatedOccurrences","delHeader","Parameters","parameter","Parameter","parameters","addParameter","ParametersList","level","parameterLocation","valueType","allowEmptyValue","checkMaxValueLength","allowRepeatedParameterName","sensitiveParameter","checkMetachars","metacharsOnParameterValueCheck","delAllParameters","changeLevel","changeParameterLocation","changeValueType","toggleAllowEmptyValue","toggleCheckMaxValueLength","toggleAllowRepeatedParameterName","toggleSensitiveParameter","toggleCheckMetachars","toggleMetacharsOnParameterValueCheck","delParameter","Config","visibleComponent","App","Policy","textArea","JSON","stringify","toPolicy","undefined","isValid","handleChange","bind","handleMenuClick","setState","isValidPolicy","parse","error","isJSON","itemName","Container","style","Row","Col","md","rows","cols","handleTextChange","color","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3aac4f69.chunk.js","sourcesContent":["import React from 'react';\nimport Nav from 'react-bootstrap/Nav';\n\nexport default class Menu extends React.Component {\n    render() {\n        return (\n            <Nav variant=\"pills\" className=\"flex-column\" activeKey={this.props.activeKey}>\n                <MenuItem name=\"General\" onClick={this.props.onClick}></MenuItem>\n                <MenuItem name=\"Blocking Settings\" onClick={this.props.onClick}></MenuItem>\n                <MenuItem name=\"Methods\" onClick={this.props.onClick}></MenuItem>\n                <MenuItem name=\"URLs\" onClick={this.props.onClick}></MenuItem>\n                <MenuItem name=\"Filetypes\" onClick={this.props.onClick}></MenuItem>\n                <MenuItem name=\"Headers\" onClick={this.props.onClick}></MenuItem>\n                <MenuItem name=\"Parameters\" onClick={this.props.onClick}></MenuItem>\n                <MenuItem name=\"Signatures\" onClick={this.props.onClick} disabled={true}></MenuItem>\n                <MenuItem name=\"Bot Defense\" onClick={this.props.onClick} disabled={true}></MenuItem>\n            </Nav>\n        );\n    }\n}\n\nclass MenuItem extends React.Component {\n    render() {\n        return (\n            <Nav.Item onClick={() => this.props.onClick(this.props.name)}>\n                <Nav.Link eventKey={this.props.name} disabled={this.props.disabled ? \"disabled\" : \"\"}>{this.props.name}</Nav.Link>\n            </Nav.Item>\n        );\n    }\n}","import React from 'react';\n\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nexport default class General extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            policy: this.props.policy,\n        };\n    }\n    changeName(e) {\n        const policy = this.props.policy;\n        policy.name = e.target.value;\n        this.props.onChange(policy);\n    }\n    changeApplicationLanguage(e) {\n        const policy = this.props.policy;\n        policy.applicationLanguage = e.target.value;\n        this.props.onChange(policy);\n    }\n    changeEnforcementMode(e) {\n        const policy = this.props.policy;\n        policy.enforcementMode = e.target.value;\n        this.props.onChange(policy);\n    }\n    changeTemplateName(e) {\n        const policy = this.props.policy;\n        policy.template.name = e.target.value;\n        this.props.onChange(policy);\n    }\n    render() {\n        return (\n            <div>\n                <h2>General Settings</h2>\n                <InputGroup size=\"sm\">\n                    <InputGroup.Prepend>\n                        <InputGroup.Text>Policy Name</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl type=\"text\"\n                        value={this.props.policy.name}\n                        onChange={e => this.changeName(e)} />\n                </InputGroup>\n                <InputGroup size=\"sm\">\n                    <InputGroup.Prepend>\n                        <InputGroup.Text>Application Language</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                        value={this.props.policy.applicationLanguage}\n                        onChange={e => this.changeApplicationLanguage(e)}\n                    />\n                </InputGroup>\n                <InputGroup size=\"sm\">\n                    <InputGroup.Prepend>\n                        <InputGroup.Text>Enforcement Mode</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                        value={this.props.policy.enforcementMode}\n                        onChange={e => this.changeEnforcementMode(e)}\n                    />\n                </InputGroup>\n                <InputGroup size=\"sm\">\n                    <InputGroup.Prepend>\n                        <InputGroup.Text>Template</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                        value={this.props.policy?.template?.name}\n                        onChange={e => this.changeTemplateName(e)}\n                    />\n                </InputGroup>\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport Form from 'react-bootstrap/Form';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\n\nexport default class BlockingSettings extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>Blocking Settings</h2>\n                <ViolationsList\n                    policy={this.props.policy}\n                    onChange={this.props.onChange}>\n                </ViolationsList>\n                <Violations\n                    policy={this.props.policy}\n                    onChange={this.props.onChange}>\n                </Violations>\n            </div>\n        );\n    }\n}\n\nclass ViolationsList extends React.Component {\n    addViolation(e) {\n        const policy = this.props.policy;\n        const violation = policy.getAllViolations().find(v => v.name === e.target.id);\n        policy.blockingSettings.violations.push(violation);\n        this.props.onChange(policy);\n    }\n    render() {\n        return (\n            <Dropdown as={ButtonGroup} className=\"mb-2\" size=\"sm\">\n                <Dropdown.Toggle id=\"dropdown-basic\">Add Violation</Dropdown.Toggle>\n                <Dropdown.Menu>\n                    {this.props.policy.getAllViolations().map((violation) => (\n                        <Dropdown.Item key={violation.name} id={violation.name} onClick={e => this.addViolation(e)}>{violation.title}</Dropdown.Item>\n                    ))}\n                </Dropdown.Menu>\n            </Dropdown>\n        )\n    }\n}\nclass Violations extends React.Component {\n    toggleAlarm(e) {\n        const policy = this.props.policy;\n        policy.blockingSettings.violations[e.target.id].alarm = !policy.blockingSettings.violations[e.target.id].alarm\n        this.props.onChange(policy);\n    }\n    toggleBlock(e) {\n        const policy = this.props.policy;\n        policy.blockingSettings.violations[e.target.id].block = !policy.blockingSettings.violations[e.target.id].block\n        this.props.onChange(policy);\n    }\n    toggleLearn(e) {\n        const policy = this.props.policy;\n        policy.blockingSettings.violations[e.target.id].learn = !policy.blockingSettings.violations[e.target.id].learn\n        this.props.onChange(policy);\n    }\n    delViolation(e) {\n        const policy = this.props.policy;\n        policy.blockingSettings.violations.splice(e.target.id, 1)\n        this.props.onChange(policy);\n    }\n    delAllViolations(e) {\n        const policy = this.props.policy;\n        policy.blockingSettings.violations = [];\n        this.props.onChange(policy);\n    }\n    render() {\n        return (\n            <div>\n                <Table striped bordered hover size=\"sm\" className=\"text-center\">\n                    <thead>\n                        <tr>\n                            <th className=\"text-left\">Violation</th>\n                            <th >Alarm</th>\n                            <th>Block</th>\n                            <th>\n                                <Button size=\"sm\" onClick={e => this.delAllViolations(e)}>\n                                    Remove\n                                </Button>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.policy.blockingSettings.violations?.map((violation, index) => (\n                            <tr key={violation.name}>\n                                <td className=\"text-left\">\n                                    {violation.title}\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={index.toString()}\n                                        checked={violation.alarm || false}\n                                        onChange={e => this.toggleAlarm(e)}>\n                                    </Form.Check>\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        type=\"checkbox\"\n                                        id={index.toString()}\n                                        checked={violation.block || false}\n                                        onChange={e => this.toggleBlock(e)}>\n                                    </Form.Check>\n                                </td>\n                                <td>\n                                    <Button size=\"sm\"\n                                        id={index.toString()}\n                                        onClick={e => this.delViolation(e)}>\n                                        Remove\n                                        </Button>\n                                </td>\n                            </tr>\n                        ))\n                        }\n                    </tbody>\n                </Table>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport FormControl from 'react-bootstrap/FormControl';\n\nimport { Method } from 'f5-waf-policy';\n\nexport default class Methods extends React.Component {\n    addMethod(e) {\n        const policy = this.props.policy;\n        const method = new Method();\n        policy.methods.push(method);\n        this.props.onChange(policy);\n    }\n    render() {\n        return (\n            <div>\n                <h2>Methods</h2>\n                <Button size=\"sm\" className=\"mb-2\" onClick={e => this.addMethod(e)}>\n                    Add Method\n                </Button>\n                <MethodsList\n                    policy={this.props.policy}\n                    onChange={this.props.onChange} />\n            </div>\n        );\n    }\n}\n\nclass MethodsList extends React.Component {\n    changeName(e) {\n        const policy = this.props.policy;\n        policy.methods[e.target.id].name = e.target.value;\n        this.props.onChange(policy);\n    }\n    delMethod(e) {\n        const policy = this.props.policy;\n        policy.methods.splice(e.target.id, 1);\n        this.props.onChange(policy);\n    }\n    delAllMethods(e) {\n        const policy = this.props.policy;\n        policy.methods = [];\n        this.props.onChange(policy);\n    }\n    render() {\n        return (\n            <div>\n                <Table striped bordered hover size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th>Method Name</th>\n                            <th className=\"text-center\">\n                                <Button size=\"sm\" onClick={e => this.delAllMethods(e)}>\n                                    Remove\n                                </Button>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.policy?.methods?.map((method, index) => (\n                            <tr key={index} className=\"text-center\">\n                                <td>\n                                    <FormControl\n                                        id={this.props.policy.methods.indexOf(method).toString()}\n                                        onChange={e => this.changeName(e)}\n                                        size=\"sm\"\n                                        value={method.name} />\n                                </td>\n                                <td>\n                                    <Button size=\"sm\" onClick={e => this.delMethod(e)}>\n                                        Remove\n                                    </Button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\n\nimport { Url } from 'f5-waf-policy';\n\nexport default class Urls extends React.Component {\n    addUrl(e) {\n        const policy = this.props.policy;\n        const url = new Url();\n        policy.urls.push(url);\n        this.props.onChange(policy);\n    }\n    render() {\n        return (\n            <div>\n                <h2>URLs</h2>\n                <Button size=\"sm\" className=\"mb-2\" onClick={e => this.addUrl(e)}>\n                    Add URL\n                </Button>\n                <UrlsList\n                    policy={this.props.policy}\n                    onChange={this.props.onChange} />\n            </div>\n        );\n    }\n}\n\nclass UrlsList extends React.Component {\n    changeName(e) {\n        const policy = this.props.policy;\n        policy.urls[e.target.id].name = e.target.value;\n        this.props.onChange(policy);\n    }\n    changeMethod(e) {\n        const policy = this.props.policy;\n        policy.urls[e.target.id].method = e.target.value;\n        this.props.onChange(policy);\n    }\n    changeProtocol(e) {\n        const policy = this.props.policy;\n        policy.urls[e.target.id].protocol = e.target.text;\n        this.props.onChange(policy);\n    }\n    changeType(e) {\n        const policy = this.props.policy;\n        policy.urls[e.target.id].type = e.target.text;\n        this.props.onChange(policy);\n    }\n    toggleAttackSignaturesCheck(e) {\n        const policy = this.props.policy;\n        policy.urls[e.target.id].attackSignaturesCheck = !policy.urls[e.target.id].attackSignaturesCheck;\n        this.props.onChange(policy);\n    }\n    toggleMetacharsOnUrlCheck(e) {\n        const policy = this.props.policy;\n        policy.urls[e.target.id].metacharsOnUrlCheck = !policy.urls[e.target.id].metacharsOnUrlCheck;\n        this.props.onChange(policy);\n    }\n    changeWildcardOrder(e) {\n        const policy = this.props.policy;\n        policy.urls[e.target.id].wildcardOrder = parseInt(e.target.value) || 0;\n        this.props.onChange(policy);\n    }\n    toggleBase64(e) {\n        const policy = this.props.policy;\n        policy.urls[e.target.id].wildcardOrder = !policy.urls[e.target.id].wildcardOrder;\n        this.props.onChange(policy);\n    }\n    toggleAllowRepeatedOccurrences(e) {\n        const policy = this.props.policy;\n        policy.urls[e.target.id].allowRepeatedOccurrences = !policy.urls[e.target.id].allowRepeatedOccurrences;\n        this.props.onChange(policy);\n    }\n    delUrl(e) {\n        const policy = this.props.policy;\n        policy.urls.splice(e.target.id, 1);\n        this.props.onChange(policy);\n    }\n    delAllUrls(e) {\n        const policy = this.props.policy;\n        policy.urls = [];\n        this.props.onChange(policy);\n    }\n    render() {\n        return (\n            <div>\n                <Table striped bordered hover size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Method</th>\n                            <th>Protocol</th>\n                            <th>Type</th>\n                            <th>Check Signatures</th>\n                            <th>Check Metachars</th>\n                            <th>Order</th>\n                            <th>\n                                <Button size=\"sm\" onClick={e => this.delAllUrls(e)}>\n                                    Remove\n                                </Button>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.policy?.urls?.map((url, index) => (\n                            <tr key={index} className=\"text-center\">\n                                <td>\n                                    <FormControl\n                                        id={this.props.policy.urls.indexOf(url).toString()}\n                                        onChange={e => this.changeName(e)}\n                                        size=\"sm\"\n                                        value={url.name} />\n                                </td>\n                                <td>\n                                    <FormControl\n                                        id={this.props.policy.urls.indexOf(url).toString()}\n                                        onChange={e => this.changeMethod(e)}\n                                        size=\"sm\"\n                                        value={url.method} />\n                                </td>\n                                <td>\n                                    <Dropdown as={ButtonGroup} size=\"sm\">\n                                        <Dropdown.Toggle>{url.protocol}</Dropdown.Toggle>\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                id={this.props.policy.urls.indexOf(url).toString()}\n                                                onClick={e => this.changeProtocol(e)}>\n                                                http\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                id={this.props.policy.urls.indexOf(url).toString()}\n                                                onClick={e => this.changeProtocol(e)}>\n                                                https\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </td>\n                                <td>\n                                    <Dropdown as={ButtonGroup} size=\"sm\">\n                                        <Dropdown.Toggle>{url.type}</Dropdown.Toggle>\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                id={this.props.policy.urls.indexOf(url).toString()}\n                                                onClick={e => this.changeType(e)}>\n                                                explicit\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                id={this.props.policy.urls.indexOf(url).toString()}\n                                                onClick={e => this.changeType(e)}>\n                                                wildcard\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.urls.indexOf(url).toString()}\n                                        onChange={e => this.toggleAttackSignaturesCheck(e)}\n                                        checked={url.attackSignaturesCheck} />\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.urls.indexOf(url).toString()}\n                                        onChange={e => this.toggleMetacharsOnUrlCheck(e)}\n                                        checked={url.metacharsOnUrlCheck} />\n                                </td>\n                                <td>\n                                    <FormControl\n                                        id={this.props.policy.urls.indexOf(url).toString()}\n                                        onChange={e => this.changeWildcardOrder(e)}\n                                        size=\"sm\"\n                                        value={url.wildcardOrder} />\n                                </td>\n                                <td>\n                                    <Button size=\"sm\" onClick={e => this.delUrl(e)}>\n                                        Remove\n                                    </Button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\n\nimport { Filetype } from 'f5-waf-policy';\n\nexport default class Filetypes extends React.Component {\n    addFiletype(e) {\n        const policy = this.props.policy;\n        let filetype = new Filetype();\n        policy.filetypes.push(filetype);\n        this.props.onChange(policy);\n    }\n    render() {\n        return (\n            <div>\n                <h2>Filetypes</h2>\n                <Button size=\"sm\" className=\"mb-2\" onClick={e => this.addFiletype(e)}>\n                    Add Filetype\n                </Button>\n                <FiletypesList\n                    policy={this.props.policy}\n                    onChange={this.props.onChange} />\n            </div>\n        );\n    }\n}\n\nclass FiletypesList extends React.Component {\n    changeName(e) {\n        const policy = this.props.policy;\n        policy.filetypes[e.target.id].name = e.target.value;\n        this.props.onChange(policy);\n    }\n    changeType(e) {\n        const policy = this.props.policy;\n        policy.filetypes[e.target.id].type = e.target.text;\n        this.props.onChange(policy);\n    }\n    toggleAllowed(e) {\n        const policy = this.props.policy;\n        policy.filetypes[e.target.id].allowed = !policy.filetypes[e.target.id].allowed;\n        this.props.onChange(policy);\n    }\n    toggleCheckUrlLength(e) {\n        const policy = this.props.policy;\n        policy.filetypes[e.target.id].checkUrlLength = !policy.filetypes[e.target.id].checkUrlLength;\n        this.props.onChange(policy);\n    }\n    changeUrlLength(e) {\n        const policy = this.props.policy;\n        policy.filetypes[e.target.id].urlLength = parseInt(e.target.value) || 0;\n        this.props.onChange(policy);\n    }\n    toggleCheckQueryStringLength(e) {\n        const policy = this.props.policy;\n        policy.filetypes[e.target.id].checkQueryStringLength = !policy.filetypes[e.target.id].checkQueryStringLength;\n        this.props.onChange(policy);\n    }\n    changeQueryStringLength(e) {\n        const policy = this.props.policy;\n        policy.filetypes[e.target.id].queryStringLength = parseInt(e.target.value) || 0;\n        this.props.onChange(policy);\n    }\n    toggleCheckPostDataLength(e) {\n        const policy = this.props.policy;\n        policy.filetypes[e.target.id].checkPostDataLength = !policy.filetypes[e.target.id].checkPostDataLength;\n        this.props.onChange(policy);\n    }\n    changePostDataLength(e) {\n        const policy = this.props.policy;\n        policy.filetypes[e.target.id].postDataLength = parseInt(e.target.value) || 0;\n        this.props.onChange(policy);\n    }\n    toggleCheckRequestLength(e) {\n        const policy = this.props.policy;\n        policy.filetypes[e.target.id].checkRequestLength = !policy.filetypes[e.target.id].checkRequestLength;\n        this.props.onChange(policy);\n    }\n    changeRequestLength(e) {\n        const policy = this.props.policy;\n        policy.filetypes[e.target.id].requestLength = parseInt(e.target.value) || 0;\n        this.props.onChange(policy);\n    }\n    toggleResponseCheck(e) {\n        const policy = this.props.policy;\n        policy.filetypes[e.target.id].responseCheck = !policy.filetypes[e.target.id].responseCheck;\n        this.props.onChange(policy);\n    }\n    delFiletype(e) {\n        const policy = this.props.policy;\n        policy.filetypes.splice(e.target.id, 1);\n        this.props.onChange(policy);\n    }\n    delAllFiletypes(e) {\n        const policy = this.props.policy;\n        policy.filetypes = [];\n        this.props.onChange(policy);\n    }\n    render() {\n        return (\n            <div>\n                <Table striped bordered hover size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th>Filetype Name</th>\n                            <th>Type</th>\n                            <th>Allowed</th>\n                            <th>Check URL Length</th>\n                            <th>URL Length</th>\n                            <th>Check QS Length</th>\n                            <th>QS Length</th>\n                            <th>Check POST Data Length</th>\n                            <th>POST Data Length</th>\n                            <th>Check Request Length</th>\n                            <th>Request Length</th>\n                            <th>Check Response</th>\n                            <th>\n                                <Button size=\"sm\" onClick={e => this.delAllFiletypes(e)}>\n                                    Remove\n                                </Button>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.policy?.filetypes?.map((filetype, index) => (\n                            <tr key={index} className=\"text-center\">\n                                <td>\n                                    <FormControl\n                                        id={this.props.policy.filetypes.indexOf(filetype).toString()}\n                                        onChange={e => this.changeName(e)}\n                                        size=\"sm\"\n                                        value={filetype.name} />\n                                </td>\n                                <td>\n                                    <Dropdown as={ButtonGroup} size=\"sm\">\n                                        <Dropdown.Toggle>{filetype.type}</Dropdown.Toggle>\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                id={this.props.policy.filetypes.indexOf(filetype).toString()}\n                                                onClick={e => this.changeType(e)}>\n                                                explicit\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                id={this.props.policy.filetypes.indexOf(filetype).toString()}\n                                                onClick={e => this.changeType(e)}>\n                                                wildcard\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.filetypes.indexOf(filetype).toString()}\n                                        onChange={e => this.toggleAllowed(e)}\n                                        checked={filetype.allowed} />\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.filetypes.indexOf(filetype).toString()}\n                                        onChange={e => this.toggleCheckUrlLength(e)}\n                                        checked={filetype.checkUrlLength} />\n                                </td>\n                                <td>\n                                    <FormControl\n                                        id={this.props.policy.filetypes.indexOf(filetype).toString()}\n                                        onChange={e => this.changeUrlLength(e)}\n                                        size=\"sm\"\n                                        value={filetype.urlLength} />\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.filetypes.indexOf(filetype).toString()}\n                                        onChange={e => this.toggleCheckQueryStringLength(e)}\n                                        checked={filetype.checkQueryStringLength} />\n                                </td>\n                                <td>\n                                    <FormControl\n                                        id={this.props.policy.filetypes.indexOf(filetype).toString()}\n                                        onChange={e => this.changeQueryStringLength(e)}\n                                        size=\"sm\"\n                                        value={filetype.queryStringLength} />\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.filetypes.indexOf(filetype).toString()}\n                                        onChange={e => this.toggleCheckPostDataLength(e)}\n                                        checked={filetype.checkPostDataLength} />\n                                </td>\n                                <td>\n                                    <FormControl\n                                        id={this.props.policy.filetypes.indexOf(filetype).toString()}\n                                        onChange={e => this.changePostDataLength(e)}\n                                        size=\"sm\"\n                                        value={filetype.postDataLength} />\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.filetypes.indexOf(filetype).toString()}\n                                        onChange={e => this.toggleCheckRequestLength(e)}\n                                        checked={filetype.checkRequestLength} />\n                                </td>\n                                <td>\n                                    <FormControl\n                                        id={this.props.policy.filetypes.indexOf(filetype).toString()}\n                                        onChange={e => this.changeRequestLength(e)}\n                                        size=\"sm\"\n                                        value={filetype.requestLength} />\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.filetypes.indexOf(filetype).toString()}\n                                        onChange={e => this.toggleResponseCheck(e)}\n                                        checked={filetype.responseCheck} />\n                                </td>\n                                <td>\n                                    <Button size=\"sm\" onClick={e => this.delFiletype(e)}>\n                                        Remove\n                                    </Button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\n\nimport { Header } from 'f5-waf-policy';\n\nexport default class Headers extends React.Component {\n    addHeader(e) {\n        const policy = this.props.policy;\n        let header = new Header();\n        policy.headers.push(header);\n        this.props.onChange(policy);\n    }\n    render() {\n        return (\n            <div>\n                <h2>Headers</h2>\n                <Button size=\"sm\" className=\"mb-2\" onClick={e => this.addHeader(e)}>\n                    Add Header\n                </Button>\n                <HeadersList\n                    policy={this.props.policy}\n                    onChange={this.props.onChange} />\n            </div>\n        );\n    }\n}\n\nclass HeadersList extends React.Component {\n    changeName(e) {\n        const policy = this.props.policy;\n        policy.headers[e.target.id].name = e.target.value;\n        this.props.onChange(policy);\n    }\n    changeType(e) {\n        const policy = this.props.policy;\n        policy.headers[e.target.id].type = e.target.text;\n        this.props.onChange(policy);\n    }\n    toggleMandatory(e) {\n        const policy = this.props.policy;\n        policy.headers[e.target.id].mandatory = !policy.headers[e.target.id].mandatory;\n        this.props.onChange(policy);\n    }\n    toggleCheckSignatures(e) {\n        const policy = this.props.policy;\n        policy.headers[e.target.id].checkSignatures = !policy.headers[e.target.id].checkSignatures;\n        this.props.onChange(policy);\n    }\n    toggleHtmlNormalization(e) {\n        const policy = this.props.policy;\n        policy.headers[e.target.id].htmlNormalization = !policy.headers[e.target.id].htmlNormalization;\n        this.props.onChange(policy);\n    }\n    toggleBase64(e) {\n        const policy = this.props.policy;\n        policy.headers[e.target.id].decodeValueAsBase64 = !policy.headers[e.target.id].decodeValueAsBase64;\n        this.props.onChange(policy);\n    }\n    toggleAllowRepeatedOccurrences(e) {\n        const policy = this.props.policy;\n        policy.headers[e.target.id].allowRepeatedOccurrences = !policy.headers[e.target.id].allowRepeatedOccurrences;\n        this.props.onChange(policy);\n    }\n    delHeader(e) {\n        const policy = this.props.policy;\n        policy.headers.splice(e.target.id, 1);\n        this.props.onChange(policy);\n    }\n    delAllHeaders(e) {\n        const policy = this.props.policy;\n        policy.headers = [];\n        this.props.onChange(policy);\n    }\n    render() {\n        return (\n            <div>\n                <Table striped bordered hover size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th>Header Name</th>\n                            <th>Type</th>\n                            <th>Mandatory</th>\n                            <th>Check Signatures</th>\n                            <th>Normalize HTML</th>\n                            <th>Decode Base64</th>\n                            <th>Allow Repeated</th>\n                            <th>\n                                <Button size=\"sm\" onClick={e => this.delAllHeaders(e)}>\n                                    Remove\n                                </Button>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.policy?.headers?.map((header, index) => (\n                            <tr key={index} className=\"text-center\">\n                                <td>\n                                    <FormControl\n                                        id={this.props.policy.headers.indexOf(header).toString()}\n                                        onChange={e => this.changeName(e)}\n                                        size=\"sm\"\n                                        value={header.name} />\n                                </td>\n                                <td>\n                                    <Dropdown as={ButtonGroup} size=\"sm\">\n                                        <Dropdown.Toggle>{header.type}</Dropdown.Toggle>\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                id={this.props.policy.headers.indexOf(header).toString()}\n                                                onClick={e => this.changeType(e)}>\n                                                explicit\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                id={this.props.policy.headers.indexOf(header).toString()}\n                                                onClick={e => this.changeType(e)}>\n                                                wildcard\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.headers.indexOf(header).toString()}\n                                        onChange={e => this.toggleMandatory(e)}\n                                        checked={header.mandatory} />\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.headers.indexOf(header).toString()}\n                                        onChange={e => this.toggleCheckSignatures(e)}\n                                        checked={header.checkSignatures} />\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.headers.indexOf(header).toString()}\n                                        onChange={e => this.toggleHtmlNormalization(e)}\n                                        checked={header.htmlNormalization} />\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.headers.indexOf(header).toString()}\n                                        onChange={e => this.toggleBase64(e)}\n                                        checked={header.decodeValueAsBase64} />\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.headers.indexOf(header).toString()}\n                                        onChange={e => this.toggleAllowRepeatedOccurrences(e)}\n                                        checked={header.allowRepeatedOccurrences} />\n                                </td>\n                                <td>\n                                    <Button size=\"sm\" onClick={e => this.delHeader(e)}>\n                                        Remove\n                                    </Button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\n\nimport { Parameter } from 'f5-waf-policy';\n\nexport default class Parameters extends React.Component {\n    addParameter(e) {\n        const policy = this.props.policy;\n        let parameter = new Parameter();\n        policy.parameters.push(parameter);\n        this.props.onChange(policy);\n    }\n    render() {\n        return (\n            <div>\n                <h2>Parameters</h2>\n                <Button size=\"sm\" className=\"mb-2\" onClick={e => this.addParameter(e)}>\n                    Add Parameter\n                </Button>\n                <ParametersList\n                    policy={this.props.policy}\n                    onChange={this.props.onChange} />\n            </div>\n        );\n    }\n}\n\nclass ParametersList extends React.Component {\n    changeName(e) {\n        const policy = this.props.policy;\n        policy.parameters[e.target.id].name = e.target.value;\n        this.props.onChange(policy);\n    }\n    changeType(e) {\n        const policy = this.props.policy;\n        policy.parameters[e.target.id].type = e.target.text;\n        this.props.onChange(policy);\n    }\n    changeLevel(e) {\n        const policy = this.props.policy;\n        policy.parameters[e.target.id].level = e.target.text;\n        this.props.onChange(policy);\n    }\n    changeParameterLocation(e) {\n        const policy = this.props.policy;\n        policy.parameters[e.target.id].parameterLocation = e.target.text;\n        this.props.onChange(policy);\n    }\n    changeValueType(e) {\n        const policy = this.props.policy;\n        policy.parameters[e.target.id].valueType = e.target.text;\n        this.props.onChange(policy);\n    }\n    toggleAllowEmptyValue(e) {\n        const policy = this.props.policy;\n        policy.parameters[e.target.id].allowEmptyValue = !policy.parameters[e.target.id].allowEmptyValue;\n        this.props.onChange(policy);\n    }\n    toggleCheckMaxValueLength(e) {\n        const policy = this.props.policy;\n        policy.parameters[e.target.id].checkMaxValueLength = !policy.parameters[e.target.id].checkMaxValueLength;\n        this.props.onChange(policy);\n    }\n    toggleAllowRepeatedParameterName(e) {\n        const policy = this.props.policy;\n        policy.parameters[e.target.id].allowRepeatedParameterName = !policy.parameters[e.target.id].allowRepeatedParameterName;\n        this.props.onChange(policy);\n    }\n    toggleSensitiveParameter(e) {\n        const policy = this.props.policy;\n        policy.parameters[e.target.id].sensitiveParameter = !policy.parameters[e.target.id].sensitiveParameter;\n        this.props.onChange(policy);\n    }\n    toggleAttackSignaturesCheck(e) {\n        const policy = this.props.policy;\n        policy.parameters[e.target.id].attackSignaturesCheck = !policy.parameters[e.target.id].attackSignaturesCheck;\n        this.props.onChange(policy);\n    }\n    toggleCheckMetachars(e) {\n        const policy = this.props.policy;\n        policy.parameters[e.target.id].checkMetachars = !policy.parameters[e.target.id].checkMetachars;\n        this.props.onChange(policy);\n    }\n    toggleMetacharsOnParameterValueCheck(e) {\n        const policy = this.props.policy;\n        policy.parameters[e.target.id].metacharsOnParameterValueCheck = !policy.parameters[e.target.id].metacharsOnParameterValueCheck;\n        this.props.onChange(policy);\n    }\n    delParameter(e) {\n        const policy = this.props.policy;\n        policy.parameters.splice(e.target.id, 1);\n        this.props.onChange(policy);\n    }\n    delAllParameters(e) {\n        const policy = this.props.policy;\n        policy.parameters = [];\n        this.props.onChange(policy);\n    }\n    render() {\n        return (\n            <div>\n                <Table striped bordered hover size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Type</th>\n                            <th>Level</th>\n                            <th>Location</th>\n                            <th>Value type</th>\n                            <th>Allow Empty Value</th>\n                            <th>Check Max Value Length</th>\n                            <th>Allow Repeated</th>\n                            <th>Sensitive</th>\n                            <th>Check Attack Signatures</th>\n                            <th>Check Metachars</th>\n                            <th>Check Metachars on Value</th>\n                            <th>\n                                <Button size=\"sm\" onClick={e => this.delAllParameters(e)}>\n                                    Remove\n                                </Button>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.policy?.parameters?.map((parameter, index) => (\n                            <tr key={index} className=\"text-center\">\n                                <td>\n                                    <FormControl\n                                        id={this.props.policy.parameters.indexOf(parameter).toString()}\n                                        onChange={e => this.changeName(e)}\n                                        size=\"sm\"\n                                        value={parameter.name} />\n                                </td>\n                                <td>\n                                    <Dropdown as={ButtonGroup} size=\"sm\">\n                                        <Dropdown.Toggle>{parameter.type}</Dropdown.Toggle>\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                id={this.props.policy.parameters.indexOf(parameter).toString()}\n                                                onClick={e => this.changeType(e)}>\n                                                explicit\n                                            </Dropdown.Item>\n                                            <Dropdown.Item\n                                                id={this.props.policy.parameters.indexOf(parameter).toString()}\n                                                onClick={e => this.changeType(e)}>\n                                                wildcard\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </td>\n                                <td>\n                                    <Dropdown as={ButtonGroup} size=\"sm\">\n                                        <Dropdown.Toggle>{parameter.level}</Dropdown.Toggle>\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                id={this.props.policy.parameters.indexOf(parameter).toString()}\n                                                onClick={e => this.changeLevel(e)}>\n                                                global\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </td>\n                                <td>\n                                    <Dropdown as={ButtonGroup} size=\"sm\">\n                                        <Dropdown.Toggle>{parameter.parameterLocation}</Dropdown.Toggle>\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                id={this.props.policy.parameters.indexOf(parameter).toString()}\n                                                onClick={e => this.changeParameterLocation(e)}>\n                                                any\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </td>\n                                <td>\n                                    <Dropdown as={ButtonGroup} size=\"sm\">\n                                        <Dropdown.Toggle>{parameter.valueType}</Dropdown.Toggle>\n                                        <Dropdown.Menu>\n                                            <Dropdown.Item\n                                                id={this.props.policy.parameters.indexOf(parameter).toString()}\n                                                onClick={e => this.changeValueType(e)}>\n                                                auto-detect\n                                            </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.parameters.indexOf(parameter).toString()}\n                                        onChange={e => this.toggleAllowEmptyValue(e)}\n                                        checked={parameter.allowEmptyValue} />\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.parameters.indexOf(parameter).toString()}\n                                        onChange={e => this.toggleCheckMaxValueLength(e)}\n                                        checked={parameter.checkMaxValueLength} />\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.parameters.indexOf(parameter).toString()}\n                                        onChange={e => this.toggleAllowRepeatedParameterName(e)}\n                                        checked={parameter.allowRepeatedParameterName} />\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.parameters.indexOf(parameter).toString()}\n                                        onChange={e => this.toggleSensitiveParameter(e)}\n                                        checked={parameter.sensitiveParameter} />\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.parameters.indexOf(parameter).toString()}\n                                        onChange={e => this.toggleAttackSignaturesCheck(e)}\n                                        checked={parameter.attackSignaturesCheck} />\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.parameters.indexOf(parameter).toString()}\n                                        onChange={e => this.toggleCheckMetachars(e)}\n                                        checked={parameter.checkMetachars} />\n                                </td>\n                                <td>\n                                    <Form.Check\n                                        id={this.props.policy.parameters.indexOf(parameter).toString()}\n                                        onChange={e => this.toggleMetacharsOnParameterValueCheck(e)}\n                                        checked={parameter.metacharsOnParameterValueCheck} />\n                                </td>\n                                <td>\n                                    <Button size=\"sm\" onClick={e => this.delParameter(e)}>\n                                        Remove\n                                    </Button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport General from './general.js';\nimport BlockingSettings from './blockingSettings.js';\nimport Methods from './methods.js';\nimport Urls from './urls.js';\nimport Filetypes from './filetypes.js';\nimport Headers from './headers.js';\nimport Parameters from './parameters.js';\n\n\nexport default class Config extends React.Component {\n    render() {\n        return (\n            <div>\n                { this.props.visibleComponent === \"General\" && <General policy={this.props.policy} onChange={this.props.onChange}></General>}\n                { this.props.visibleComponent === \"Blocking Settings\" && <BlockingSettings policy={this.props.policy} onChange={this.props.onChange}></BlockingSettings>}\n                { this.props.visibleComponent === \"Methods\" && <Methods policy={this.props.policy} onChange={this.props.onChange}></Methods>}\n                { this.props.visibleComponent === \"URLs\" && <Urls policy={this.props.policy} onChange={this.props.onChange}></Urls>}\n                { this.props.visibleComponent === \"Filetypes\" && <Filetypes policy={this.props.policy} onChange={this.props.onChange}></Filetypes>}\n                { this.props.visibleComponent === \"Headers\" && <Headers policy={this.props.policy} onChange={this.props.onChange}></Headers>}\n                { this.props.visibleComponent === \"Parameters\" && <Parameters policy={this.props.policy} onChange={this.props.onChange}></Parameters>}\n                { this.props.visibleComponent === \"Signatures\" && <div><h2>Signatures</h2><h3>TBD</h3></div>}\n                { this.props.visibleComponent === \"Bot Defense\" && <div><h2>Bot Defense</h2><h3>TBD</h3></div>}\n            </div >\n        );\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport Menu from './menu.js';\nimport Config from './config.js';\nimport { Policy, isValidPolicy } from 'f5-waf-policy';\nimport { isJSON } from './helpers.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      policy: new Policy(),\n      textArea: JSON.stringify(new Policy().toPolicy(), undefined, 4),\n      visibleComponent: \"General\",\n      isValid: new Policy().isValid()\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleMenuClick = this.handleMenuClick.bind(this);\n  }\n\n  handleChange(policy) {\n    this.setState((state) => ({\n      isValid: isValidPolicy(policy.toPolicy()),\n      policy: policy,\n      textArea: JSON.stringify(policy.toPolicy(), undefined, 4)\n    }));\n  }\n\n  handleTextChange(e) {\n    this.setState({\n      textArea: e.target.value\n    });\n    if (isJSON(e.target.value) && isValidPolicy(JSON.parse(e.target.value))) {\n      const policy = new Policy(JSON.parse(e.target.value));\n      this.setState({\n        isValid: true,\n        policy: policy,\n        textArea: JSON.stringify(policy.toPolicy(), undefined, 4)\n      });\n    } else {\n      this.setState({ isValid: false });\n    }\n\n  }\n\n  handleMenuClick(itemName) {\n    this.setState(() => {\n      return { visibleComponent: itemName };\n    });\n  }\n\n  render() {\n    return (\n      <Container style={{ \"max-width\": \"1400px\" }} >\n        <Row>\n          <Col>\n            <h1>F5 WAF Policy Editor</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col md=\"auto\">\n            <Menu onClick={this.handleMenuClick} activeKey={this.state.visibleComponent}></Menu>\n          </Col>\n          <Col>\n            <Config policy={this.state.policy} onChange={this.handleChange} visibleComponent={this.state.visibleComponent}></Config>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <FormControl as=\"textarea\"\n              value={this.state.textArea}\n              rows={20} cols={60}\n              onChange={e => this.handleTextChange(e)}\n              style={{ color: (this.state.isValid) ? \"green\" : \"red\" }} />\n          </Col>\n        </Row>\n      </ Container >\n    );\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);","export default function setToValue(obj, path, value) {\n    var stringToPath = function (path) {\n        if (typeof path !== 'string') return path;\n        var output = [];\n        path.split('.').forEach(function (item, index) {\n            item.split(/\\[([^}]+)\\]/g).forEach(function (key) {\n                if (key.length > 0) {\n                    output.push(key);\n                }\n            });\n        });\n        return output;\n    };\n    path = stringToPath(path);\n    for (var i = 0; i < path.length - 1; i++) {\n        obj = obj[path[i]];\n    }\n    obj[path[path.length - 1]] = value;\n};\n\nexport function isJSON(text) {\n    if (typeof text !== \"string\") {\n        return false;\n    }\n    try {\n        JSON.parse(text);\n        return true;\n    } catch (error) {\n        return false;\n    }\n}"],"sourceRoot":""}