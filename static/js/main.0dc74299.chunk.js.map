{"version":3,"sources":["store/dashboard/dashboard.types.ts","utils/styles.hook.ts","store/dashboard/dashboard.hooks.ts","store/action-types.ts","store/dashboard/dashboard.actions.ts","component/dashboard/main.sidebar.component.tsx","component/dashboard/main.appbar.component.tsx","component/dashboard/policy-editor.dashboard.component.tsx","component/application-preset/application-preset.component.tsx","component/policy-editor/policy-editor.component.tsx","component/policy-wizard/policy-wizard.component.tsx","App.tsx","store/dashboard/handler/dashboard-module-set.handler.ts","store/dashboard/dashboard.reducer.ts","store/reducer.base.ts","store/index.ts","storage/session.storage.ts","index.tsx"],"names":["DashboardModuleEnum","drawerWidth","useStyles","makeStyles","theme","createStyles","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","title","flexGrow","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","maxWidth","minWidth","contentShift","nested","paddingLeft","nested2","ellipsis","overflow","textOverflow","sectionButtons","margin","hidden","index","useDashboardState","useSelector","state","dashboardState","DASHBOARD_MODULE_SET","dashboardModuleSet","currentModule","type","MainSidebarComponent","onDrawerClose","classes","dispatch","useDispatch","className","IconButton","onClick","ChevronLeft","Divider","List","text","id","PolicyEditor","icon","Edit","PolicyWizard","Assistant","ApplicationPreset","Apps","map","ListItem","button","selected","ListItemIcon","ListItemText","primary","GetApp","Share","MainAppbarComponent","open","onDrawerOpen","Toolbar","color","aria-label","edge","clsx","Typography","variant","noWrap","PolicyEditorDashboardComponent","children","useState","setOpen","CssBaseline","AppBar","position","Drawer","anchor","paper","ApplicationPresetComponent","PolicyEditorComponent","PolicyWizardComponent","App","uiFactory","dashboardModuleSetHandler","currentState","action","undefined","dashboardStateInit","DashboardReducerHandlerFactory","_currentState","_reducerFactory","processor","this","produce","draft","ApplicationReducers","combineReducers","dashboardReducerHandlerFactory","process","stateVar","SessionStorage","serializedState","sessionStorage","getItem","JSON","parse","e","stringify","setItem","persistedState","loadState","composeEnhancers","composeWithDevTools","trace","traceLimit","store","createStore","subscribe","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0dc74299.chunk.js","sourcesContent":["import { Action } from \"redux\";\nimport { ReducerHandler } from \"../reducer.base\";\n\nexport enum DashboardModuleEnum {\n  PolicyEditor,\n  PolicyWizard,\n  ApplicationPreset,\n}\n\nexport type DashboardState = {\n  currentModule: DashboardModuleEnum;\n};\n\nexport interface DashboardAction\n  extends Action,\n    Partial<{ currentModule: DashboardModuleEnum }> {}\n\nexport type DashboardDispatch = (args: DashboardAction) => DashboardAction;\nexport type DashboardReducerHandler = ReducerHandler<\n  DashboardAction,\n  DashboardState\n>;\n","import { createStyles, makeStyles } from \"@material-ui/core/styles\";\n\nconst drawerWidth = 340;\n\nexport const useStyles = makeStyles(\n  (theme) => {\n    return createStyles({\n      root: {\n        display: \"flex\",\n      },\n      appBar: {\n        transition: theme.transitions.create([\"margin\", \"width\"], {\n          easing: theme.transitions.easing.sharp,\n          duration: theme.transitions.duration.leavingScreen,\n        }),\n      },\n      title: {\n        flexGrow: 1,\n      },\n      appBarShift: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n        transition: theme.transitions.create([\"margin\", \"width\"], {\n          easing: theme.transitions.easing.easeOut,\n          duration: theme.transitions.duration.enteringScreen,\n        }),\n      },\n      menuButton: {\n        marginRight: theme.spacing(2),\n      },\n      hide: {\n        display: \"none !important\",\n      },\n      drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n      },\n      drawerPaper: {\n        width: drawerWidth,\n      },\n      drawerHeader: {\n        display: \"flex\",\n        alignItems: \"center\",\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        justifyContent: \"flex-end\",\n      },\n      content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n        transition: theme.transitions.create(\"margin\", {\n          easing: theme.transitions.easing.sharp,\n          duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginLeft: -drawerWidth,\n        maxWidth: \"100vw\",\n        minWidth: \"720px\",\n      },\n      contentShift: {\n        transition: theme.transitions.create(\"margin\", {\n          easing: theme.transitions.easing.easeOut,\n          duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginLeft: 0,\n        maxWidth: `calc(100vw - ${drawerWidth}px)`,\n      },\n      nested: {\n        paddingLeft: theme.spacing(4),\n      },\n      nested2: {\n        paddingLeft: theme.spacing(8),\n      },\n      ellipsis: {\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n      },\n      sectionButtons: {\n        margin: theme.spacing(2),\n      },\n      hidden: {\n        display: \"none\",\n      },\n    });\n  },\n  { index: 1 }\n);\n","import { DashboardDispatch, DashboardState } from \"./dashboard.types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ApplicationState } from \"../index\";\n\nexport const useDashboardDispatch = () => useDispatch<DashboardDispatch>();\nexport const useDashboardState: () => DashboardState = () =>\n  useSelector((state: ApplicationState) => state.dashboardState);\n","export const DASHBOARD_MODULE_SET = \"dashboard::module::set\";\n","import { DashboardAction, DashboardModuleEnum } from \"./dashboard.types\";\nimport { DASHBOARD_MODULE_SET } from \"../action-types\";\n\nexport function dashboardModuleSet(\n  currentModule: DashboardModuleEnum\n): Pick<DashboardAction, \"type\" | \"currentModule\"> {\n  return {\n    type: DASHBOARD_MODULE_SET,\n    currentModule,\n  };\n}\n","import * as React from \"react\";\nimport { useStyles } from \"../../utils/styles.hook\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nimport Divider from \"@material-ui/core/Divider\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport {\n  Apps,\n  Assistant,\n  ChevronLeft,\n  Edit,\n  GetApp,\n  Share,\n} from \"@material-ui/icons\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport {\n  useDashboardDispatch,\n  useDashboardState,\n} from \"../../store/dashboard/dashboard.hooks\";\nimport { DashboardModuleEnum } from \"../../store/dashboard/dashboard.types\";\nimport { dashboardModuleSet } from \"../../store/dashboard/dashboard.actions\";\n\nexport type MainSidebarProps = Readonly<{ onDrawerClose: any }>;\n\nexport const MainSidebarComponent: React.FunctionComponent<MainSidebarProps> =\n  ({ onDrawerClose }) => {\n    const classes = useStyles();\n    const dispatch = useDashboardDispatch();\n    const state = useDashboardState();\n\n    return (\n      <React.Fragment>\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={onDrawerClose}>\n            <ChevronLeft />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          {[\n            {\n              text: \"Policy Editor\",\n              id: DashboardModuleEnum.PolicyEditor,\n              icon: <Edit />,\n              onClick: () => {\n                dispatch(dashboardModuleSet(DashboardModuleEnum.PolicyEditor));\n              },\n            },\n            {\n              text: \"Policy Wizard\",\n              id: DashboardModuleEnum.PolicyWizard,\n              icon: <Assistant />,\n              onClick: () => {\n                dispatch(dashboardModuleSet(DashboardModuleEnum.PolicyWizard));\n              },\n            },\n            {\n              text: \"Application Preset\",\n              id: DashboardModuleEnum.ApplicationPreset,\n              icon: <Apps />,\n              onClick: () => {\n                dispatch(\n                  dashboardModuleSet(DashboardModuleEnum.ApplicationPreset)\n                );\n              },\n            },\n          ].map(({ text, id, icon, onClick }) => (\n            <React.Fragment>\n              <ListItem\n                button\n                key={text}\n                onClick={() => onClick()}\n                selected={id === state.currentModule}\n              >\n                <ListItemIcon>{icon}</ListItemIcon>\n                <ListItemText primary={text} />\n              </ListItem>\n            </React.Fragment>\n          ))}\n        </List>\n        <Divider />\n        <List>\n          {[\n            {\n              text: \"Download\",\n              icon: <GetApp />,\n              onClick: () => {},\n            },\n            {\n              text: \"Share\",\n              icon: <Share />,\n              onClick: () => {},\n            },\n          ].map(({ text, icon, onClick }) => (\n            <React.Fragment>\n              <ListItem button key={text} onClick={() => onClick()}>\n                <ListItemIcon>{icon}</ListItemIcon>\n                <ListItemText primary={text} />\n              </ListItem>\n            </React.Fragment>\n          ))}\n        </List>\n      </React.Fragment>\n    );\n  };\n","import * as React from \"react\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport clsx from \"clsx\";\nimport { useStyles } from \"../../utils/styles.hook\";\nimport { Toolbar } from \"@material-ui/core\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport type MainAppbarProps = Readonly<{\n  open: boolean;\n  onDrawerOpen: any;\n}>;\n\nexport const MainAppbarComponent: React.FunctionComponent<MainAppbarProps> = ({\n  open,\n  onDrawerOpen,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Toolbar>\n      <IconButton\n        color=\"inherit\"\n        aria-label=\"open drawer\"\n        onClick={onDrawerOpen}\n        edge=\"start\"\n        className={clsx(classes.menuButton, open && classes.hide)}\n      >\n        <MenuIcon />\n      </IconButton>\n      <Typography variant=\"h6\" noWrap>\n        WAF Policy Editor\n      </Typography>\n    </Toolbar>\n  );\n};\n","import * as React from \"react\";\nimport clsx from \"clsx\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\n\nimport { useState } from \"react\";\nimport { useStyles } from \"../../utils/styles.hook\";\nimport { MainSidebarComponent } from \"./main.sidebar.component\";\nimport { MainAppbarComponent } from \"./main.appbar.component\";\n\nexport const PolicyEditorDashboardComponent: React.FunctionComponent = ({\n  children,\n}) => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n\n  const onDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const onDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <MainAppbarComponent onDrawerOpen={onDrawerOpen} open={open} />\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <MainSidebarComponent onDrawerClose={onDrawerClose} />\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        {children}\n      </main>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\nexport const ApplicationPresetComponent: React.VoidFunctionComponent = () => {\n  return <Typography>Application Preset is under development</Typography>;\n};\n","import * as React from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\nexport const PolicyEditorComponent: React.VoidFunctionComponent = () => {\n  return <Typography>Policy Editor is under development</Typography>;\n};\n","import * as React from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\nexport const PolicyWizardComponent: React.VoidFunctionComponent = () => {\n  return <Typography>Policy Wizard is under development</Typography>;\n};\n","import React from \"react\";\nimport { PolicyEditorDashboardComponent } from \"./component/dashboard/policy-editor.dashboard.component\";\nimport { useDashboardState } from \"./store/dashboard/dashboard.hooks\";\nimport { DashboardModuleEnum } from \"./store/dashboard/dashboard.types\";\nimport { ApplicationPresetComponent } from \"./component/application-preset/application-preset.component\";\nimport { PolicyEditorComponent } from \"./component/policy-editor/policy-editor.component\";\nimport { PolicyWizardComponent } from \"./component/policy-wizard/policy-wizard.component\";\n\nfunction App() {\n  const { currentModule } = useDashboardState();\n\n  const uiFactory: { [key: number]: JSX.Element } = {\n    [DashboardModuleEnum.ApplicationPreset]: <ApplicationPresetComponent />,\n    [DashboardModuleEnum.PolicyWizard]: <PolicyEditorComponent />,\n    [DashboardModuleEnum.PolicyEditor]: <PolicyWizardComponent />,\n  };\n\n  return (\n    <PolicyEditorDashboardComponent>\n      {uiFactory[currentModule]}\n    </PolicyEditorDashboardComponent>\n  );\n}\n\nexport default App;\n","import {\n  DashboardAction,\n  DashboardReducerHandler,\n  DashboardState,\n} from \"../dashboard.types\";\nimport { Draft } from \"immer\";\n\nexport const dashboardModuleSetHandler: DashboardReducerHandler = (\n  currentState: Draft<DashboardState>,\n  action: DashboardAction\n) => {\n  if (action.currentModule === undefined) return currentState;\n\n  currentState.currentModule = action.currentModule;\n\n  return currentState;\n};\n","import {\n  DashboardAction,\n  DashboardModuleEnum,\n  DashboardState,\n} from \"./dashboard.types\";\nimport { ReducerBase } from \"../reducer.base\";\nimport { DASHBOARD_MODULE_SET } from \"../action-types\";\nimport { dashboardModuleSetHandler } from \"./handler/dashboard-module-set.handler\";\n\nexport function dashboardStateInit(): DashboardState {\n  return {\n    currentModule: DashboardModuleEnum.PolicyEditor,\n  };\n}\n\nclass DashboardReducerHandlerFactory extends ReducerBase<\n  DashboardAction,\n  DashboardState\n> {\n  constructor(state: DashboardState) {\n    super(state, {\n      [DASHBOARD_MODULE_SET]: dashboardModuleSetHandler,\n    });\n  }\n}\n\nexport const DashboardReducer = (\n  state: DashboardState = dashboardStateInit(),\n  action: DashboardAction\n): DashboardState => {\n  const dashboardReducerHandlerFactory = new DashboardReducerHandlerFactory(\n    state\n  );\n  return dashboardReducerHandlerFactory.process(action);\n};\n","import { Action } from \"redux\";\nimport produce, { Draft } from \"immer\";\n\nexport type ReducerHandler<\n  PolicyEditorAction extends Action,\n  PolicyEditorState\n> = (\n  currentState: Draft<PolicyEditorState>,\n  action: PolicyEditorAction\n) => Draft<PolicyEditorState>;\n\nexport abstract class ReducerBase<\n  PolicyEditorAction extends Action,\n  PolicyEditorState\n> {\n  protected constructor(\n    private _currentState: PolicyEditorState,\n    private _reducerFactory: {\n      [key: string]: ReducerHandler<PolicyEditorAction, PolicyEditorState>;\n    }\n  ) {}\n\n  process(action: PolicyEditorAction): PolicyEditorState {\n    const processor = this._reducerFactory[action.type];\n    if (!processor) return this._currentState;\n\n    return produce<PolicyEditorState>(this._currentState, (draft) =>\n      processor(draft, action)\n    );\n  }\n}\n","import { combineReducers, Reducer } from \"redux\";\nimport { DashboardState } from \"./dashboard/dashboard.types\";\nimport {\n  DashboardReducer,\n  dashboardStateInit,\n} from \"./dashboard/dashboard.reducer\";\n\nexport interface ApplicationState {\n  dashboardState: DashboardState;\n}\n\nexport const ApplicationReducers: Reducer<ApplicationState> =\n  combineReducers<ApplicationState>({\n    dashboardState: DashboardReducer,\n  });\n\nexport function DefaultApplicationState(): ApplicationState {\n  return {\n    dashboardState: dashboardStateInit(),\n  };\n}\n","import { ApplicationState, DefaultApplicationState } from \"../store\";\n\nconst stateVar = \"editor-state#0.1\";\n\nexport class SessionStorage {\n  loadState(): ApplicationState {\n    try {\n      const serializedState = sessionStorage.getItem(stateVar);\n      return JSON.parse(serializedState ? serializedState : \"\");\n    } catch (e) {\n      return DefaultApplicationState();\n    }\n  }\n\n  saveState(state: ApplicationState) {\n    try {\n      const serializedState = JSON.stringify(state);\n      sessionStorage.setItem(stateVar, serializedState);\n    } catch (e) {}\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { SessionStorage } from \"./storage/session.storage\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { createStore, Store } from \"redux\";\nimport { ApplicationReducers, ApplicationState } from \"./store\";\n\nconst sessionStorage = new SessionStorage();\nconst persistedState = sessionStorage.loadState();\n\nconst composeEnhancers = composeWithDevTools({ trace: true, traceLimit: 25 });\n\nconst store: Store<ApplicationState> = createStore(\n  ApplicationReducers,\n  persistedState,\n  composeEnhancers()\n);\n\nstore.subscribe(() => {\n  sessionStorage.saveState(store.getState());\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}